name: Deploy and initialise D1 Database

on:
  workflow_dispatch:
    inputs:
      d1_database_name:
        description: 'Database name to use for creation'
        required: true
        type: string
      d1_database_id:
        description: 'Database id from wrangler.toml file'
        required: false
        type: string
  workflow_call:
    inputs:
      d1_database_name:
        description: 'Database name to use for creation'
        required: true
        type: string
      d1_database_id:
        description: 'Database id from wrangler.toml file'
        required: true
        type: string
      create_database:
        description: 'Whether to create the database or not'
        required: true
        type: boolean
    outputs:
      d1_apparent_database_id:
        value: ${{ jobs.deploy.outputs.database_apparent_id }}
        description: The id of the CloudFlare database as determined by its name
    

jobs:
  deploy:
    name: Deploy and initialise D1 Database
    runs-on: ubuntu-latest
    outputs:
      database_apparent_id: ${{ steps.get_db_id_by_name.outputs.uuid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cloudflare Workers CLI and tomlq
        run: |
          npm install -g wrangler
          pip install yq
      
      - name: Create the D1 database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        if: ${{ inputs.create_database }}
        run: |
          wrangler d1 create ${{ inputs.d1_database_name }}

      - name: Call CloudFlare API to find the database id by name
        id: get_db_id_by_name
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database?name=${{ inputs.d1_database_name }}" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result[0].uuid' | echo uuid=$(cat) >> $GITHUB_OUTPUT    

      - name: Replace database id in wrangler.toml
        run: |
          sed -i -e 's/${{ inputs.d1_database_id }}/${{ steps.get_db_id_by_name.outputs.uuid }}/g' wrangler.toml
          cat wrangler.toml

      - name: Initialize the database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler d1 execute DB --file init.sql
